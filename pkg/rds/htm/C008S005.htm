<html><head><title>[RDS] 8.5 Filters and Categories</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href = "C008S000.htm">Up</a>] [<a href ="C008S004.htm">Previous</a>] [<a href = "theindex.htm">Index</a>]
<h1>8.5 Filters and Categories</h1><p>
<p>
The following was originally posted at the <font face="Gill Sans,Helvetica,Arial">GAP</font> forum by Thomas
Breuer <a href="biblio.htm#BreuersAnswer"><cite>BreuersAnswer</cite></a>. 
<p>
Each filter in <font face="Gill Sans,Helvetica,Arial">GAP</font> is either a simple filter or a meet of filters.
For example, <code>IsInt</code> and <code>IsPosRat</code> are simple filters,
and <code>IsPosInt</code> is defined as their meet <code>IsInt and IsPosRat</code>.
<p>
Each <strong>simple filter</strong> is of one of the following kinds.
<p>
1. property:
   Such a filter is an operation, the filter value can be computed.
   The (unary) methods of this operation must return <code>true</code> or <code>false</code>,
   and the return value is stored in the argument,
   except if the argument is of a basic data type such as cyclotomic
   (including rationals and integers), finite field element, permutation,
   or internally represented list --the latter with a few exceptions.
   Examples of properties are <code>IsFinite</code>, <code>IsAbelian</code>, <code>IsSSortedList</code>.
<p>
2. attribute tester:
   Such a filter is associated to an operation that has been created
   via <code>DeclareAttribute</code>,
   in the sense that the value is <code>true</code> if and only if a return value
   for (a unary method of) this operation is stored in the argument.
   Currently, attribute values are stored in objects in the filter
   <code>IsAttributeStoringRep</code>.
   Examples of attribute testers are <code>HasSize</code>, <code>HasCentre</code>,
   <code>HasDerivedSubgroup</code>.
<p>
2.' property tester:
   Such a filter is similar to an attribute tester,
   but the associated operation is a property.
   So property testers can return <code>true</code> also if the argument is not in
   the filter <code>IsAttributeStoringRep</code>.
   Examples of property testers are <code>HasIsFinite</code>, <code>HasIsAbelian</code>,
   <code>HasIsSSortedList</code>.
<p>
3. category or representation:
   These filters are not associated to operations, their values cannot
   be computed but are set upon creation of an object and should not be
   changed later, such that for a filter of this kind, one can rely on
   the fact that if the value is <code>true</code> then it was <code>true</code> already when
   the object in question was created.
<p>
   The distinction between representation and category is intended to
   express dependency on or independence of the way how the object is
   stored internally.
   For example, <code>IsPositionalObjectRep</code>, <code>IsComponentObjectRep</code>, and
   <code>IsInternalRep</code> are filters of the representation kind;
   the idea is that such filters are used in low level methods,
   and that higher level methods can be implemented without referring
   to these filters.
<p>
   Examples of categories are <code>IsInt</code>, <code>IsRat</code>, <code>IsPerm</code>, <code>IsFFE</code>,
   and filters expressing algebraic structures,
   such as <code>IsMagma</code>, <code>IsMagmaWithOne</code>, <code>IsAdditiveMagma</code>.
   When one calls such a filter, one can be sure that no computation is
   triggered.
   For example, whenever a quotient of two integers is formed, the result
   is clearly in the filter <code>IsRat</code>, but the system also stores the value
   of <code>IsInt</code>, i.e., <font face="Gill Sans,Helvetica,Arial">GAP</font> does not support ``unevaluated rationals'' for
   which the <code>IsInt</code> value is computed on demand and then stored.
<p>
4. other filters:
   Some filters do not belong to the above kinds,
   they are not associated to operations but they are intended to be
   set (or even reset) by the user or by functions also after the creation
   of objects.
   Examples are <code>IsQuickPositionList</code>, <code>CanEasilyTestMembership</code>,
   <code>IsHandledByNiceBasis</code>.
<p>
Each <strong>meet of filters</strong> can involve computable simple filters (properties,
attribute and property testers) and not computable simple filters
(categories, representations, other filters).
When one calls a meet of two filters then the two filters from which
the meet was formed are evaluated (if necessary).
So a meet of filters is computable only if at least one computable simple
filter is involved.
<p>
<a name = "SSEC1"></a>
<li><code>IsComputableFilter( </code><var>filter</var><code> ) F</code>
<p>
'IsComputableFilter(<var>filter</var>)' returns <var>true</var> if a the filter <var>filter</var>
is computable. Filters for which 'IsComputableFilter' returns <var>false</var>
may be used in 'DeclareOperation'.
<p>
<pre>
    gap&gt; IsComputableFilter( IsFinite );
    true
    gap&gt; IsComputableFilter( HasSize );
    true
    gap&gt; IsComputableFilter( HasIsFinite );
    true
    gap&gt; IsComputableFilter( IsPositionalObjectRep );
    false
    gap&gt; IsComputableFilter( IsInt );
    false
    gap&gt; IsComputableFilter( IsQuickPositionList );
    false
    gap&gt; IsComputableFilter( IsInt and IsPosRat );
    false
    gap&gt; IsComputableFilter( IsMagma );
    false
</pre>
<p>
<p>
[<a href = "C008S000.htm">Up</a>] [<a href ="C008S004.htm">Previous</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>RDS manual<br>November 2006
</address></body></html>